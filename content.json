{"meta":{"title":"HERO","subtitle":"","description":"","author":"hujun","url":"http://example.com"},"pages":[],"posts":[{"title":"Appium基础操作","slug":"Appium基础操作","date":"2021-09-02T09:39:25.000Z","updated":"2021-09-02T10:20:13.246Z","comments":true,"path":"2021/09/02/Appium基础操作/","link":"","permalink":"http://example.com/2021/09/02/Appium%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/","excerpt":"","text":"一、name 定位根据name进行定位，对于android来说，就是text属性 但是由于text稳定性不是很好，所以appium 1.5开始废弃了该方法。 123from Capability import *driver.find_element_by_name(&#x27;请输入用户名&#x27;).send_keys(&#x27;&#x27;)driver.find_element_by_name(&#x27;登录&#x27;).click() 二、classname 定位classname定位是根据元素类型来进行定位，在元素class中，一般有id不使用classname定位。 1234from Capability import *driver.find_element_by_class_name(&#x27;android.widget.EditText&#x27;).send_keys(&#x27;hj18594962283&#x27;)driver.find_element_by_class_name(&#x27;android.widget.EditText&#x27;).send_keys(&#x27;jxx.hxx21.&#x27;)driver.find_element_by_class_name(&#x27;android.widget.Button&#x27;).click() 三、相对定位相对定位是先找到该元素的有对应属性的父元素节点，然后基于父元素进行元素定位。 案例 通过打开考研帮注册界面 123456from Capability import driverdriver.find_element_by_id(&#x27;com.tal.kaoyan:id/login_register_text&#x27;).click()root_element=driver.find_element_by_id(&#x27;com.tal.kaoyan:id/activity_register_parentlayout&#x27;)root_element.find_element_by_class_name(&#x27;android.widget.ImageView&#x27;).click() 四、xpath定位xpath定位是一种路径定位方式，主要是依赖于元素绝对路径或者相关属性来定位，但是绝对路径xpath执行效率比较低（特别是元素路径比较深的时候），一般使用比较少。通常使用xpath相对路径和属性定位。 表达式 描述 / 从根节点选取。 // 从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。 nodename 选取此节点的所有子节点。 . 选取当前节点。 .. 选取当前节点的父节点。 @ 选取属性。 通配符 描述 * 匹配任何元素节点。 @* 匹配任何属性节点。 node() 匹配任何类型的节点。 使用xpath定位元素来进行登录操作。 1234from Capability import driverdriver.find_element_by_xpath(&#x27;//android.widget.EditText[@text=&quot;请输入用户名&quot;]&#x27;).send_keys(&#x27;liubo10010&#x27;)driver.find_element_by_xpath(&#x27;//*[@class=&quot;android.widget.EditText&quot; and @index=&quot;3&quot;]&#x27;).send_keys(&#x27;liubo10010&#x27;)driver.find_element_by_xpath(&#x27;//android.widget.Button&#x27;).click() 五、LIST 定位List定位首先是使用find_elements_by_XX获取一组相同的class属性的元素，然后使用数组下标来区分标记不同元素进行相关操作。 通过考研帮注册，选择指定头像 1234567891011from Capability import driverdriver.find_element_by_id(&#x27;com.tal.kaoyan:id/login_register_text&#x27;).click()driver.find_element_by_id(&#x27;com.tal.kaoyan:id/activity_register_userheader&#x27;).click()images=driver.find_elements_by_id(&#x27;com.tal.kaoyan:id/item_image&#x27;)images[2].click()driver.find_element_by_id(&#x27;com.tal.kaoyan:id/save&#x27;).click() 经过实践执行测试用户注册功能时，发现无法完成注册功能，可能与APP有关 执行的脚本 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950from Capability import driverimport random#进入注册界面选择并设置头像driver.find_element_by_id(&#x27;com.tal.kaoyan:id/login_register_text&#x27;).click()driver.find_element_by_id(&#x27;com.tal.kaoyan:id/activity_register_userheader&#x27;).click()images=driver.find_elements_by_id(&#x27;com.tal.kaoyan:id/item_image&#x27;)images[2].click()driver.find_element_by_id(&#x27;com.tal.kaoyan:id/save&#x27;).click()#注册信息填写username=&#x27;Test&#x27;+&#x27;FLY&#x27;+str(random.randint(1000,9000))print(&#x27;username: %s&#x27; %username)driver.find_element_by_id(&#x27;com.tal.kaoyan:id/activity_register_username_edittext&#x27;).send_keys(username)password=&#x27;appium&#x27;+str(random.randint(1000,9000))print(&#x27;password: %s&#x27; %password)driver.find_element_by_id(&#x27;com.tal.kaoyan:id/activity_register_password_edittext&#x27;).send_keys(password)email=&#x27;pwd&#x27;+str(random.randint(1000,9000))+&#x27;@163.com&#x27;print(&#x27;email: %s&#x27; %email)driver.find_element_by_id(&#x27;com.tal.kaoyan:id/activity_register_email_edittext&#x27;).send_keys(email)driver.find_element_by_id(&#x27;com.tal.kaoyan:id/activity_register_register_btn&#x27;).click()#院校选择driver.find_element_by_id(&#x27;com.tal.kaoyan:id/perfectinfomation_edit_school_name&#x27;).click()#选择省份driver.find_elements_by_id(&#x27;com.tal.kaoyan:id/more_forum_title&#x27;)[1].click()#选择具体院校--同济大学driver.find_elements_by_id(&#x27;com.tal.kaoyan:id/university_search_item_name&#x27;)[1].click()#专业选择driver.find_element_by_id(&#x27;com.tal.kaoyan:id/activity_perfectinfomation_major&#x27;).click()#选择经济学类-统计学-经济统计学driver.find_elements_by_id(&#x27;com.tal.kaoyan:id/major_subject_title&#x27;)[1].click()driver.find_elements_by_id(&#x27;com.tal.kaoyan:id/major_group_title&#x27;)[2].click()driver.find_elements_by_id(&#x27;com.tal.kaoyan:id/major_search_item_name&#x27;)[1].click()#点击“进入考研帮”按钮driver.find_element_by_id(&#x27;com.tal.kaoyan:id/activity_perfectinfomation_goBtn&#x27;).click() 六、UIAutomator定位简介UIAutomator元素定位是 Android 系统原生支持的定位方式，虽然与 xpath 类似，但比它更加好用，且支持元素全部属性定位.定位原理是通过android 自带的android uiautomator的类库去查找元素。使用如下：find_element_by_android_uiautomator() 可以运用UiAutomator元素定位。 定位方法 · id定位 · text定位 · class name定位 id定位是根据元素的resource-id属性来进行定位，使用 UiSelector().resourceId()方法即可。 1234567from Capability import driverdriver.find_element_by_android_uiautomator(&#x27;newUiSelector().resourceId(&quot;com.tal.kaoyan:id/login_email_edittext&quot;)&#x27;).send_keys(&#x27;liubo10010&#x27;)driver.find_element_by_android_uiautomator(&#x27;newUiSelector().resourceId(&quot;com.tal.kaoyan:id/login_password_edittext&quot;)&#x27;).send_keys(&#x27;liubo10010&#x27;)driver.find_element_by_android_uiautomator&#x27;new UiSelector().resourceId(&quot;com.tal.kaoyan:id/login_login_btn&quot;)&#x27;).click() 七、元素等待作用设置元素等待可以更加灵活的制定等待定位元素的时间，从而增强脚本的健壮性，提高执行效率。 元素等待类型分为强制等待、隐式等待、显示等待 强制等待 设置固定的等待时间，使用sleep()方法即可实现 123from time import sleep#强制等待2秒sleep(2) 隐式等待 隐式等待是针对全部元素设置的等待时间 1driver.implicitly_wait(40) 显式等待 显示等待是针对某个元素来设置的等待时间 方法WebDriverWait格式参数如下： 12345678910from selenium.webdriver.support.ui import WebDriverWaitWebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)driver : WebDrivertimeout : 最长超时时间，默认以秒为单位poll_frequency : 休眠时间的间隔时间，默认为0.5秒ignored_exceptions : 超时后的异常信息，默认情况下抛NoSuchElementException异常。WebDriverWait()一般和until()或until_not()方法配合使用，另外，lambda提供了一个运行时动态创建函数的方法。from selenium.webdriver.support.ui import WebDriverWaitWebDriverWait(driver,10).until(lambda x:x.find_element_by_id(&quot;elementID&quot;)) 八、截图方法方法一 save_screenshot() 该方法直接保存当前屏幕截图到当前脚本所在文件位置。 1driver.save_screenshot(&#x27;login.png&#x27;) 方法二 截图保留到指定文件路径 1driver.get_screenshot_as_file(&#x27;./images/login.png&#x27;) “./“是在运行的py的目录下，images是存在该目录里，如果没有这个文件夹，需要手动建立 考研帮登录后截图测试脚本 1234567891011from Capability import driverdriver.find_element_by_id(&#x27;com.tal.kaoyan:id/login_email_edittext&#x27;).clear()driver.find_element_by_id(&#x27;com.tal.kaoyan:id/login_email_edittext&#x27;).send_keys(&#x27;liubo10010&#x27;)driver.find_element_by_id(&#x27;com.tal.kaoyan:id/login_password_edittext&#x27;).send_keys(&#x27;liubo10010&#x27;)driver.save_screenshot(&#x27;login.png&#x27;)driver.get_screenshot_as_file(&#x27;./images/login.png&#x27;)driver.find_element_by_id(&#x27;com.tal.kaoyan:id/login_login_btn&#x27;).click() 九、滑动效果在Appium中模拟用户滑动操作需要使用swipe方法，该方法定义如下： 12345678910111213def swipe(self, start_x, start_y, end_x, end_y, duration=None): &quot;&quot;&quot;Swipe from one point to another point, for an optional duration. :Args: - start_x - x-coordinate at which to start - start_y - y-coordinate at which to start - end_x - x-coordinate at which to stop - end_y - y-coordinate at which to stop - duration - (optional) time to take the swipe, in ms. :Usage: driver.swipe(100, 100, 100, 400) 注释———-swipe()方法的参数说明： start_x：起始横坐标 start_y：起始纵坐标 end_x：结束时横坐标 end_y：结束时纵坐标 duration：滑动持续时间，单位毫秒，默认None（一般设置500-1000毫秒比较合适） 实现平面上各个方向位置滑动 通过调用get_size()、swipeLeft()函数来实现滑动效果 1234567891011121314151617#获取屏幕尺寸def get_size(): x=driver.get_window_size()[&#x27;width&#x27;] y=driver.get_window_size()[&#x27;height&#x27;] return x,y#显示屏幕尺寸（width,height）l=get_size()print(l)#向左滑动def swipeLeft(): l=get_size() x1=int(l[0]*0.9) y1=int(l[1]*0.5) x2=int(l[0]*0.1) driver.swipe(x1,y1,x2,y1,1000)","categories":[],"tags":[{"name":"appuim 基础","slug":"appuim-基础","permalink":"http://example.com/tags/appuim-%E5%9F%BA%E7%A1%80/"}],"keywords":[]},{"title":"monkey日志管理","slug":"monkey日志管理","date":"2021-09-01T11:43:05.000Z","updated":"2021-09-01T11:51:10.789Z","comments":true,"path":"2021/09/01/monkey日志管理/","link":"","permalink":"http://example.com/2021/09/01/monkey%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/","excerpt":"","text":"自定义脚本的稳定性测试常规Monkey测试执行的是随机的事件流，但如果只是想让Monkey测试某个特定场景这时候就需要用到自定义脚本了，Monkey支持执行用户自定义脚本的测试，用户只需要按照Monkey脚本的规范编写好脚本，存放到手机上，启动Monkey通过-f 参数调用脚本即可 需求分析获取元素坐标点位置Monkey脚本只能通过****坐标****的方式来定位点击和移动事件的屏幕位置，这里就需要提前获取坐标信息。获取坐标信息的方法很多，最简单的方法就是打开手机中的开发人员选项，打开“显示指针位置”。随后，在屏幕上的每次操作，在导航栏上都会显示坐标信息。 monkey脚本APILaunchActivity(pkg_name, cl_name)：启动应用的Activity。参数：包名和启动的Activity。 Tap(x, y, tapDuration)： 模拟一次手指单击事件。参数：x,y为控件坐标，tapDuration为点击的持续时间，此参数可省略。 UserWait(sleepTime)： 休眠一段时间 DispatchPress(keyName)： 按键。参数： keycode。 RotateScreen(rotationDegree, persist)： 旋转屏幕。 参数：rotationDegree为旋转角度， e.g. 1代表90度；persist表示旋转之后是否固定，0表示旋转后恢复，非0则表示固定不变。 DispatchString(input)： 输入字符串。 DispatchFlip(true/false)： 打开或者关闭软键盘。 PressAndHold(x, y, pressDuration)： 模拟长按事件。 Drag(xStart, yStart, xEnd, yEnd, stepCount)： 用于模拟一个拖拽操作。 PinchZoom(x1Start, y1Start, x1End, y1End, x2Start, y2Start, x2End, y2End, stepCount)： 模拟缩放手势。 LongPress()： 长按2秒。 DeviceWakeUp()： 唤醒屏幕。 PowerLog(power_log_type, test_case_status)： 模拟电池电量信息。 WriteLog()： 将电池信息写入sd卡。 RunCmd(cmd)： 运行shell命令。 DispatchPointer(downtime,eventTime,action,x,yxpressure,size,metastate,xPrecision,yPrecision,device,edgeFlags)： 向指定位置，发送单个手势。 DispatchPointer(downtime,eventTime,action,x,yxpressure,size,metastate,xPrecision,yPrecision,device,edgeFilags)： 发送按键消息。 LaunchInstrumentation(test_name,runner_name)： 运行一个instrumentation测试用例。 DispatchTrackball： 模拟发送轨迹球事件。 ProfileWait： 等待5秒。 StartCaptureFramerate()： 获取帧率。 EndCaptureFramerate(input)： 结束获取帧率。 monkey脚本格式头部 123456type = raw events count = 1 speed = 1.0 //下面为monkey命令 start data &gt;&gt; 具体的monkey脚本内容 编写脚本 kyb.txt 1234567891011121314151617181920212223242526272829#头文件信息type = raw events count = 1speed = 1.0#启动测试start data &gt;&gt;LaunchActivity(com.tal.kaoyan,com.tal.kaoyan.ui.activity.SplashActivity)UserWait(2000)Tap(624,900,1000) #点击取消升级UserWait(2000)Tap(806,64,1000) #点击跳过UserWait(2000)Tap(217,378,1000) #点击用户名输入框DispatchString(账户)UserWait(2000)Tap(197,461,1000) #点击密码输入框DispatchString(密码)UserWait(2000)Tap(343,637,1000) #点击登录按钮 执行脚本 脚本编写完成后，传到手机设备上，然后执行。 123adb push C:\\Users\\admin\\Desktop\\kyb1.txt /sdcardadb shell monkey -f /sdcard/kyb1.txt -v 1 执行结果 123456789101112131415C:\\Users\\admin&gt;adb shell monkey -f /sdcard/kyb.txt -v 1:Monkey: seed=1524592021303 count=1:IncludeCategory: android.intent.category.LAUNCHER:IncludeCategory: android.intent.category.MONKEYReplaying 0 events with speed 1.0:Switch: #Intent;action=android.intent.action.MAIN;category=android.intent.category.LAUNCHER;launchFlags=0x10200000;component=com.tal.kaoyan/.ui.activity.SplashActivity;end // Allowing start of Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.tal.kaoyan/.ui.activity.SplashActivity &#125; in package com.tal.kaoyan:Sending Touch (ACTION_DOWN): 0:(267.0,1233.0) // Allowing start of Intent &#123; act=com.android.systemui.recent.action.TOGGLE_RECENTS cmp=com.android.systemui/.recent.RecentsActivity &#125; in package com.android.systemui:Sending Touch (ACTION_UP): 0:(267.0,1233.0)Events injected: 5:Sending rotation degree=0, persist=false:Dropped: keys=0 pointers=0 trackballs=0 flips=0 rotations=0## Network stats: elapsed time=7201ms (0ms mobile, 0ms wifi, 7201ms not connected)// Monkey finished 注意事项 头文件代码书写注意“=”两边预留空格，否则会出现如下报错 1java.lang.NumberFormatException: Invalid int: &quot;&quot; 参考资料","categories":[],"tags":[{"name":"monkey日志管理","slug":"monkey日志管理","permalink":"http://example.com/tags/monkey%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"}],"keywords":[]},{"title":"monkey","slug":"monkey","date":"2021-08-31T10:13:54.000Z","updated":"2021-09-01T11:41:54.865Z","comments":true,"path":"2021/08/31/monkey/","link":"","permalink":"http://example.com/2021/08/31/monkey/","excerpt":"","text":"monkey 理论monkey定义andriod自动化测试工具，对被测程序进行压力测试，检查和评估被测程序的稳定性。 monkey官方文档 monkey路径Monkey程序是Android系统自带的，其启动脚本是位于Android系统的/system/bin目录的Monkey文件，其jar包是位于Android系统的/system/framework目录的Monkey.jar文件。用户主要是通过adb命令来启动Monkey的，Monkey在运行时，会根据命令行参数的配置，生成伪随机的事件流，并在Android设备上执行对应的测试事件。 monkey 启动步骤 连接模拟器 12adb connect 127.0.0.1:62001#连接adb devices#检查设备连接情况 连接成功后输入命令 1adb shell 进入到指定目录1cd /system/bin 输入monkey 命令看到一串信息提示就是成功，没有报错即可。 强制关闭 monkey adb shell ps 查看全部在运行的进程 查找出com.android.commands.monkey 进程PID adb shell kill pid 杀掉monkey进程 monkey 命令monkey命令格式如下： 1$ adb shell monkey [options] &lt;event-count&gt; · [options] 是指monkey可传入的参数，是可选项（如果不指定options，Monkey将以无反馈模式启动，并把事件任意发送到安装在目标环境中的全部包） · 是指随机发送事件数。如：输入100就是执行100个伪随机事件，为必选项。 monkey 参数参数分类· 常规类参数 · 事件类参数 · 约束类参数 · 调试类参数 1.常规类参数常规类参数包括帮助参数和日志信息参数。 1.帮助类参数 1monkey -h 2.日志级别 1$ adb shell monkey -v &lt;event-count&gt; -v：打印出日志信息，每个-v将增加反馈信息的级别。-v越多日志信息越详细，不过目前最多支持3个-v 2.事件类参数1.执行指定脚本 1234$ adb shell monkey -f &lt;scriptfile&gt; &lt;event-count&gt;eg：$ adb shell monkey -f /mnt/sdcard/test1 2.伪随机数生成种子值 1234$ adb shell monkey -s &lt;seed&gt; &lt;event-count&gt;eg:$ adb shell monkey -s 666 100 3.设置间隔 如果你希望在每一个指令之间加上固定的间隔时间，可以用–throttle（注意，前面是–）命令。 123$ adb shell monkey --throttle &lt;milliseconds&gt;eg:$ adb shell monkey --throttle 3000 5 –throttle：后面接时间，单位为ms（），表示事件之间的固定延迟（即执行每一个指令间隔的时间），若不接该选项，monkey将不会延迟。 4.调整触摸事件百分比 如果你希望调整触摸事件的百分比，记住使用–pct-touch。 123$ adb shell monkey --pct-toucheg:$ adb shell monkey -v -v --pct-touch 100 200 注意：触摸事件不单单是按键，它泛指发生在某一位置的一个down-up事件 5.调整手势事件百分比 123$ adb shell monkey --pct-motioneg:$ adb shell monkey -v -v --pct-motion 100 200 6.调整应用启动事件的百分比 1$ adb shell monkey --pct-appswtich &lt;percent&gt; 7.调整屏幕旋转事件百分比 1$ adb shell monkey --pct-rotation &lt;percent&gt; 约束类参数1.包约束 -p：后面接一个或多个包名（&lt;”allowed-package-name”&gt;），如果应用需要访问其他包里的Activity，那相关的包也需要在此同时指定。如果不指定任何包，monkey将允许系统启动全部包里的Activity。 12345$ adb shell monkey -p &lt;allowed-package-name&gt; &lt;event-count&gt;eg：$ adb shell monkey -p com.tal.kaoyan 500$ adb shell monkey -p com.tal.kaoyan -p com.tencent.mm 500 2.activity类约束 1adb shell monkey -c &lt;main-category&gt; &lt;event-count&gt; 调试类参数1.应用程序崩溃后继续发送时间 1$ adb shell monkey --ignore-crashes &lt;event-count&gt; 2.超时错误继续发送事件 1$ adb shell monkey --ignore-timeouts 3.应用程序权限错误发生后继续发送事件 1$ adb shell monkey --ignore-security-exceptions 测试命令 12345678adb shell monkey -p com.tal.kaoyan--pct-touch 40 --pct-motion 25 --pct-appswitch 10--pct-rotation 5-s 1666 --throttle 400--ignore-crashes--ignore-timeouts-v -v 200","categories":[],"tags":[{"name":"monkey","slug":"monkey","permalink":"http://example.com/tags/monkey/"}],"keywords":[]},{"title":"MonkeyRunner API","slug":"MonkeyRunner-API","date":"2021-08-31T05:58:58.000Z","updated":"2021-08-31T10:08:08.649Z","comments":true,"path":"2021/08/31/MonkeyRunner-API/","link":"","permalink":"http://example.com/2021/08/31/MonkeyRunner-API/","excerpt":"","text":"MonkeyRunner工具主要有三个类： MonkeyRunner MonkeyDevice MonkeyImage ​ 官方API文档 1.MonkeyRunner 类：MonkeyRunner提供连接真机和模拟器、输入、暂停、警告框等方法 alert() 警告框 choice() 选项列表框 help() API帮助文档 input() 输入 sleep() 暂停 waitForConnection() 等待设备连接 常用方法waitForConnection(float timeout,string deviceid)， 12345from com.android.monkeyrunner import MonkeyRunner as mrprint(&quot;connect devices...&quot;)device=mr.waitForConnection()# device=mr.waitForConnection(5,&#x27;127.0.0.1:62001&#x27;) 2.MonkeyDevices类MonkeyDevice类提供了安装和卸载程序包、开启Activity、发送按键和点击事件、运行测试包等方法。 broadcastInternt() 发送广播 drag() 拖动 getProperty() 获取当前设备属性 getSystemProperty() 获取当前设备属性 installPackage() 安装应用 instrument() 执行测试用例 press() 按键 reboot() 重启 removePackage() 删除指定Package shell() 执行命令 startActivity() 启动应用 touch() 点击 常用方法 · installPackage (string path) · removePackage (string package) · startActivity (string uri, string action, string data, string mimetype, iterable categories dictionary extras, component component, flags) · touch (integer x, integer y, integer type) touch参数说明 integer x，x坐标值。integer y，y坐标值。integer type，key event类型（如DOWN、UP、DOWN_AND_UP）。 DOWN为按下事件 UP为弹起事件 DOWN_AND_UP为按下弹起事件。 · drag (tuple start, tuple end, float duration, integer steps) drag参数详细说明如下： tuple start，拖拽起始位置，为tuple类型的(x,y)坐标点。tuple end，拖拽终点位置，为tuple类型的(x,y)坐标点。float duration，拖拽手势持续时间，默认为1.0s。-integer steps，插值点的步数，默认值为10。 实践案例：连接设备，安装考研帮App并启动 代码如下： 1234567891011121314151617181920from com.android.monkeyrunner import MonkeyRunner as mrfrom com.android.monkeyrunner import MonkeyDevice as mdprint(&quot;connect devices...&quot;)device=mr.waitForConnection()print(&quot;install app...&quot;)device.installPackage(r&#x27;C:\\Users\\admin\\Desktop\\kaoyan3.1.0.apk&#x27;)package = &#x27;com.tal.kaoyan&#x27;activity = &#x27;com.tal.kaoyan.ui.activity.SplashActivity&#x27;runComponent = package + &#x27;/&#x27; + activityprint(&quot;launch App...&quot;)device.startActivity(component=runComponent)代码执行方式monkeyrunner scripfileC:\\Users\\admin&gt;monkeyrunner E:\\monkeyrunner_script\\kyb.py 3.MonkeyImage类MonkeyImage类在测试过程中用来保存各种格式的测试截图，并可以进行图像对比。 convertToBytes() 转换图像格式 getRawPixel() 获取当前坐标像素元组 getRawPixelint() 获取当前坐标像素元组 sameAs() 图像对比 writeToFile() 保存图像文件 getSubimage() 截取子图像 常用方法 · takeSnapshot() 进行屏幕截图 · writeToFile() 保存图像文件到指定的文件路径 用法示例 1234from com.android.monkeyrunner import MonkeyImage as mi print(&quot;takeSnapshot&quot;)screenshot=device.takeSnapshot() screenshot.writeToFile(r&#x27;E:\\monkeyrunner_script\\test.png&#x27;,&#x27;png&#x27;) 综合实践测试场景· 连接设备，自动安装并启动考研帮app · 启动后登录账号，然后截图并保存到指定文件位置。 思路分析· 连接设备 · 安装app · 启动app · 输入用户名密码点击登录按钮 · 截图 脚本实现kyb_login.py 1234567891011121314151617181920212223242526272829303132333435363738394041424344from com.android.monkeyrunner import MonkeyRunner as mrfrom com.android.monkeyrunner import MonkeyDevice as mdfrom com.android.monkeyrunner import MonkeyImage as miprint(&quot;connect devices...&quot;)device=mr.waitForConnection()print(&quot; install app&quot;)device.installPackage(r&#x27;C:\\Users\\admin\\Desktop\\kaoyan3.1.0.apk&#x27;)print(&quot;launch app...&quot;)package=&#x27;com.tal.kaoyan&#x27;activity=&#x27;com.tal.kaoyan.ui.activity.SplashActivity&#x27;runComponent=package+&#x27;/&#x27;+activitydevice.startActivity(component=runComponent)mr.sleep(3)print(&quot;touch cancel button&quot;)device.touch(618,895,&#x27;DOWN_AND_UP&#x27;)mr.sleep(1)print(&quot;touch skip button&quot;)device.touch(804,67,&#x27;DOWN_AND_UP&#x27;)mr.sleep(1)print(&quot;input username and password&quot;)device.touch(57,373,&#x27;DOWN_AND_UP&#x27;)mr.sleep(2)device.type(账户)device.touch(152,480,&#x27;DOWN_AND_UP&#x27;)mr.sleep(2)device.type(密码)mr.sleep(2)print(&quot;touch login button&quot;)device.touch(331,634,&#x27;DOWN_AND_UP&#x27;)print(&quot;takeSnapshot&quot;)screenshot=device.takeSnapshot()screenshot.writeToFile(r&#x27;D:\\monkeyrunner\\kyb.png&#x27;,&#x27;png&#x27;) 注意事项方法调用错误 1AttributeError: type object &#x27;com.android.monkeyrunner.XXXXX&#x27; has no attribute XXXXXX 检查调用的方法名是否写错，特别是注意区分大小写。 字符编码错误 1SyntaxError: Non-ASCII character in file &#x27;E:\\monkeyrunner_script\\kyb.py&#x27;, but no encoding declared; 需要在代码顶部补充 # -- coding: utf-8 -- 或者去掉代码中的中文字符","categories":[],"tags":[{"name":"Monkeyrunner","slug":"Monkeyrunner","permalink":"http://example.com/tags/Monkeyrunner/"}],"keywords":[]},{"title":"从0开始搭建一个博客站点","slug":"从0开始搭建一个博客站点","date":"2021-08-30T07:41:14.000Z","updated":"2021-08-30T10:37:50.229Z","comments":true,"path":"2021/08/30/从0开始搭建一个博客站点/","link":"","permalink":"http://example.com/2021/08/30/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9/","excerpt":"","text":"1.Hexo的入门 hexo 可以理解为是基于node.js制作的一个博客工具，不是我们理解的一个开源的博客系统。 hexo 正常来说，不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器。简而言之：hexo是个静态页面生成、上传的工具。 参考：官网文档 1.1安装node.js网上安装教程 验证安装是否成功 进入cmd 输入node -v 出现相应的版本号ok 12C:\\Windows\\System32&gt;node -vv14.17.5 1.2安装gitgit安装教程 验证git安装成功与否 进入cmd 输入 git version 出现相应的版本号ok 12C:\\Windows\\System32&gt;git versiongit version 2.33.0.windows.2 1.3安装、配置hexo文件1.进入git bash窗口 2.输入以下命令 1npm install -g hexo-cli 3.出现一堆代码 4.输入以下命令 123hexo init d:/文件夹名 ----表示在d盘创建这个文件夹 cd 文件名 ----进入文件夹 npm install ----安装 1.4关于hexo文件夹里面的内容1.4.1 hexo文件目录安装hexo完毕，d盘目录下你创建的文档下面的内容： 1234567891011├── _config.yml├── .deploy_git├── .github├── public├── themes├── source| └── .gitkeep ├── scraffolds| ├── draft.md ├── page.md └── post.md 1.4.2 hexo目录文件介绍（了解）_confifig.yml 网站的配置信息，您可以在此配置大部分的参数。 package.json 已经默认给你安装的应用程序的信息 scaffffolds 模版文件夹。当您新建文章时，Hexo 会根据 scaffffold 来建立文件，了解即可 source 资源文件夹是存放用户资源的地方。一般你通过命令创建的文章都存储在 _posts 文件夹里面 themes 这个主要存放的hexo的主题文件，类似英雄皮肤，通过更改不同主题来实现不同酷炫的效果。 1.5_confifig.yml配置文件详解（了解）1.5.1网站相关 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 你的名字 language 网站使用的语言 timezone 网站时区时区列表 1.5.2网址相关 参数 描述 url 网址 root 网站根目录 permalink 文章永久链接 格式 permalink_defaults 永久链接中各部分的默认值 1.5.3目录相关 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public archive_dir 标签文件夹 tags category_dir 归档文件夹 categories code_dir Include code 文件夹 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 1.5.4日期与格式Hexo 使用 Moment.js 来解析和显示时间。 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 H:mm:ss 1.6hexo相关命令指令参考 1.7建立远程博客访问1.7.1 本地启动hexo启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可： 1hexo server 或者 hexo s 浏览器访问网址：http://localhost:4000/ 至此，你的hexo本地博客已经搭建成功。 1.7.2GithubPages的使用在开始之前创建github官网账号，并创建一个仓库 注意仓库名的格式： 仓库名为：Github账号名称.github.io 1.安装 hexo-deployer-git插件。在命令（Git Bash）运行以下命令 $ npm install hexo-deployer-git --save 2.添加SSH key 创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可。 邮箱地址和注册github的邮箱保持一致。 $ ssh-keygen -t rsa -C &quot;邮箱地址&quot; 添加到 github。 复制密钥文件内容（路径形如 C:\\users\\administrator\\.ssh\\id_rsa.pub)，粘贴到 New SSH KEY即可。 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功： 12$ ssh -T git@github.com $ yes 3.修改 _config.yml （在站点目录下）。文件末尾修改为： 123456# Deployment ## Docs: https://hexo.io/docs/deployment.html deploy:type: git repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git branch: master 注意：上面的格式type和repo的冒号后面需要空格两下； ​ 上面仓库地址写ssh地址，不写http地址 。 4.推送到GithubPages。在命令行（即Git Bash）依次输入以下命令，返回 INFO Deploy done: git即成功推送： 12$ hexo g $ hexo d 或 1$ hexo g -d 5.等待1分钟左右，浏览器访问网址： https://&lt;Github账号 名称&gt;.github.io 至此，您的Hexo博客已经搭建在GithubPages, 域名为 https://&lt;Github账号名称&gt;.github.io 。","categories":[],"tags":[{"name":"hexo 搭建","slug":"hexo-搭建","permalink":"http://example.com/tags/hexo-%E6%90%AD%E5%BB%BA/"}],"keywords":[]},{"title":"胡俊学习经历","slug":"胡俊学习经历","date":"2021-08-28T08:38:36.000Z","updated":"2021-08-30T03:35:14.336Z","comments":true,"path":"2021/08/28/胡俊学习经历/","link":"","permalink":"http://example.com/2021/08/28/%E8%83%A1%E4%BF%8A%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/","excerpt":"","text":"黑盒测试一、测试活动1、需求分析2、测试计划3、用例设计4、用例执行5、测试报告（天猫项目）二、等价类测试法1. 什么是等价类是把所有可能的输入数据,即程序的输入域划分成若干部分（子集）,然后从每一个子集中选取少数具有代表性的数据作为测试用例。2、划分等价类可以把全部输入数据合理划分为若干等价类,在每一个等价类中取一个数据作为测试的输入条件就可以用少量代表性的测试数据取得较好的测试结果3、划分等价类的方法1）区间；2）数值集合划分；3）输入是布尔量，确定有效和无效等价类；4）按照数值划分；5）按照限制条件或规则划分；6）细分等价类4、设计测试用例（原则）1）为每一个等价类规定一个唯一的编号；2）设计一个新的测试用例,使其尽可能多地覆盖尚未被覆盖地有效等价类,重复这一步，直到所有的有效等价类都被覆盖为止；3） 设计一个新的测试用例,使其仅覆盖一个尚未被覆盖的无效等价类,重复这一步，直到所有的无效等价类都被覆盖为止；（三角形案例）三、边界值分析1.定义边界值分析法就是对输入或输出的边界值进行测试的一种黑盒测试方法。2.与等价类的区别边界值分析不是从某等价类中随便挑一个作为代表，而是使这个等价类的每个边界都要作为测试条件。边界值分析不仅考虑输入条件，还要考虑输出空间产生的测试情况。3.边界值分析设计1）确定边界情况；2）选取正好等于、刚刚大于、刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据；健壮性测试：有效和无效均要测试；0作为边界值要反复测试强性测试：有效覆盖弱性测试：无效覆盖弱健壮性：有效、无效均覆盖部分三角形问题的边界值分析测试用例","categories":[],"tags":[],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2021-08-27T11:11:52.026Z","updated":"2021-08-27T11:11:52.026Z","comments":true,"path":"2021/08/27/hello-world/","link":"","permalink":"http://example.com/2021/08/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}